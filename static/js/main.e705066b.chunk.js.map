{"version":3,"sources":["Welcome.js","StrainInfo.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","className","onClick","getData","StrainInfo","class","race","name","posEffects","map","posEffect","negativeEffects","negativeEffect","flavorsArray","flavor","medicalEffects","medicalEffect","App","saveResponse","response","strains","positiveEffects","key","data","push","effects","positive","flattenedEffects","flat","cleanEffects","Set","setState","apiInfo","isLoading","handleInputChange","event","selection","target","value","filteredResult","state","filter","includes","selectedEffect","filteredApiInfo","scrollDream","window","scrollTo","scrollContent","current","offsetTop","scrollToTop","scrollTop","handleRefresh","preventDefault","axios","url","method","responseType","then","undefined","React","createRef","this","ref","length","onChange","disabled","effect","slice","strain","medical","negative","flavors","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e705066b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Welcome = (props) => {\n   return (\n     <header>\n       <div className=\"wrapper\">\n         <div className=\"welcome\">\n           <div className=\"title\">\n             <h1>Releaf</h1>\n             <p>A Cannabis Strain Library</p>\n           </div>\n           <button onClick={props.getData} >\n             Click to start\n           </button>\n         </div>\n       </div>\n     </header>\n   );\n\n  \n};\n\nexport default Welcome;","import React from 'react';\n\nconst StrainInfo = (props) => {\n\n   return (\n     <div className=\"strain-card wrapper\">\n       <div className=\"name-race\">\n         <h3>\n           <i class=\"fas fa-cannabis\"></i> {props.race}\n         </h3>\n         <h2>{props.name}</h2>\n       </div>\n       <div className=\"strain-info\">\n         <div className=\"info\">\n           <h4>positive:</h4>\n           {props.posEffects.map((posEffect) => {\n             return <p>{posEffect}</p>;\n           })}\n         </div>\n         <div className=\"info\">\n           <h4>negative:</h4>\n           {props.negativeEffects.map((negativeEffect) => {\n             return <p>{negativeEffect}</p>;\n           })}\n         </div>\n\n         {/* within the flavorsArray (which is props), map over all the flavours and make every flavour display individually by calling them flavor and passing that parameter into the map so they can return in an p*/}\n         <div className=\"info\">\n           <h4>flavours:</h4>\n           {props.flavorsArray.map((flavor) => {\n             return <p>{flavor}</p>;\n           })}\n         </div>\n         <div className=\"info\">\n           <h4>Can help with:</h4>\n           {props.medicalEffects.map((medicalEffect) => {\n             return <p>{medicalEffect}</p>;\n           })}\n         </div>\n       </div>\n     </div>\n   );\n}\n\nexport default StrainInfo;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Welcome from './Welcome';\n// import EffectSelect from './EffectSelect';\nimport StrainInfo from './StrainInfo';\nimport \"./index.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    // providing initial state\n    this.state = {\n      isLoading: false,\n      // passing an empty array as it's value\n      apiInfo: [],\n      filteredApiInfo: [],\n      effects: [],\n      selectedEffect: undefined,\n      // renderedStrains: []\n    };\n    this.scrollContent = React.createRef();\n    this.scrollTop = React.createRef();\n  }\n\n  saveResponse = (response) => {\n    // create a new empty array\n    let strains = [];\n    let positiveEffects = [];\n    // look over every item in the response object and push a unique object to the strains array\n    for (let key in response.data) {\n      strains.push({\n        // copy over the details that aleady existed\n        ...response.data[key],\n\n        // add a new property called name and use the key as its value (which represents the name of the strain)\n        name: key,\n      });\n      positiveEffects.push(response.data[key].effects.positive);\n    }\n\n    // flat removes the arrays inside of an array and makes it one array\n    const flattenedEffects = positiveEffects.flat();\n    // ...new Set gets rid of duplicates\n    const cleanEffects = [...new Set(flattenedEffects)];\n\n    // setting the API info to a new state\n    this.setState({\n      apiInfo: strains,\n      isLoading: false,\n      effects: cleanEffects,\n      // renderedStrains: []\n    });\n  };\n\n  handleInputChange = (event) => {\n    const selection = event.target.value;\n\n    // filter apiInfo.effect.positive to only have selection\n    const allData = [...this.state.apiInfo];\n\n    const filteredResult = allData.filter((data) => {\n      return data.effects.positive.includes(selection);\n    });\n\n    // update our apiInfo\n    this.setState({\n      selectedEffect: selection,\n      filteredApiInfo: filteredResult,\n    });\n\n    this.scrollDream();\n  };\n\n  // scroll function, credit: hector\n  scrollDream = () => {\n    window.scrollTo(0, this.scrollContent.current.offsetTop);\n  };\n\n  // Function to scroll to top of the page on refresh\n  scrollToTop = () => {\n    window.scrollTo(0, this.scrollTop.current.offsetTop);\n  };\n\n  handleRefresh = (event) => {\n    event.preventDefault();\n    this.scrollToTop();\n  };\n\n  getData = () => {\n    this.setState({\n      isLoading: true,\n    });\n\n    // calling the API with axios\n    axios({\n      url: \"https://strainapi.evanbusse.com/qAtccGm/strains/search/all\",\n      method: \"GET\",\n      responseType: \"json\",\n    }).then(this.saveResponse);\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Welcome\n          // getData represents props. Within the props of getData, give it the information from the API (all of the strains). (it knows what the APIinfo is from \"this\"). Now the user can click the button and it will render all the strains.\n          getData={this.getData}\n        />\n        <main>\n          {/* displays when page is loading */}\n          <div className=\"preloader\">\n            {/* ternary operator - fancy if statement */}\n            {this.state.isLoading ? <p>loading...</p> : \"\"}\n          </div>\n\n          <section className=\"effect-select\" ref={this.scrollContent}>\n            {/* user selected postive efect */}\n            {this.state.effects.length > 0 ? (\n              <select\n                onChange={this.handleInputChange}\n                value={this.state.selectedEffect}\n              >\n                <option disabled value=\"\">\n                  Please Select An Option\n                </option>\n                {this.state.effects.map((effect) => {\n                  return <option value={effect}>{effect}</option>;\n                })}\n              </select>\n            ) : (\n              \"\"\n            )}\n          </section>\n\n          <section>\n            <div className=\"card-container\" ref={this.scrollTop}>\n              {/* take all the info from the API and map over it, making every individual item called strain */}\n              {this.state.filteredApiInfo.slice(0, 5).map((strain) => {\n                return (\n                  <StrainInfo\n                    // pass the component StrainInfo information from the API by assigning that info to props. name(props)=strain.name\n                    name={strain.name}\n                    race={strain.race}\n                    medicalEffects={strain.effects.medical}\n                    negativeEffects={strain.effects.negative}\n                    posEffects={strain.effects.positive}\n                    flavorsArray={strain.flavors}\n                  />\n                );\n              })}\n            </div>\n            <button className=\"move\" onClick={this.handleRefresh}>\n              <i class=\"fas fa-chevron-up\"></i>\n            </button>\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}